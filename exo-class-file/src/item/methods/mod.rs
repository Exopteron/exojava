use std::io::Read;

use crate::{error::{self, ClassFileError}, stream::ClassFileStream};

use super::{attribute_info::{Attributes, AttributesCollection}, ClassFileItem, ConstantPool};

/// Method info.
#[derive(Debug)]
pub struct MethodInfo {
    /// The value of the access_flags item is a mask of flags
    /// used to denote access permission to and properties of this method.
    pub access_flags: MethodAccessFlags,
    /// The value of the name_index item must be a valid index
    /// into the constant_pool table. The constant_pool entry
    /// at that index must be a CONSTANT_Utf8_info structure
    /// (§4.4.7) representing either one of the special method
    /// names <init> or <clinit> (§2.9),
    /// or a valid unqualified name denoting a method (§4.2.2).
    pub name_index: u16,
    /// The value of the descriptor_index item must be a
    /// valid index into the constant_pool table. The
    /// constant_pool entry at that index must be a
    /// CONSTANT_Utf8_info structure representing
    /// a valid method descriptor (§4.3.3).
    pub descriptor_index: u16,
    /// Each value of the attributes table must be an attribute_info structure (§4.7).s
    /// A method can have any number of optional attributes associated with it.
    pub attributes: AttributesCollection,
}

impl ClassFileItem for MethodInfo {
    fn read_from_stream<R: Read>(
        s: &mut ClassFileStream<R>,
        cp: Option<&ConstantPool>,
    ) -> error::Result<Self>
    where
        Self: Sized,
    {
        let access_flags =
            MethodAccessFlags::from_bits(s.read_u2()?).ok_or(ClassFileError::BadMethodAccessFlags)?;

        let name_index = s.read_u2()?;

        let descriptor_index = s.read_u2()?;



        Ok(Self {
            access_flags,
            name_index,
            descriptor_index,
            attributes: AttributesCollection::read_from_stream(s, cp)?,
        })
    }
}

bitflags::bitflags! {
    pub struct MethodAccessFlags: u16 {
        /// Declared public; may be accessed from outside its package.
        const ACC_PUBLIC = 0x0001;
        /// Declared private; accessible only within the defining class.
        const ACC_PRIVATE = 0x0002;
        /// Declared protected; may be accessed within subclasses.
        const ACC_PROTECTED = 0x0004;
        /// Declared static.
        const ACC_STATIC = 0x0008;
        /// Declared final; must not be overridden (§5.4.5).
        const ACC_FINAL = 0x0010;
        /// Declared synchronized; invocation is wrapped by a monitor use.
        const ACC_SYNCHRONIZED = 0x0020;
        /// A bridge method, generated by the compiler.
        const ACC_BRIDGE = 0x0040;
        /// Declared with variable number of arguments.
        const ACC_VARARGS = 0x0080;
        /// Declared native; implemented in a language other than Java.
        const ACC_NATIVE = 0x0100;
        /// Declared abstract; no implementation is provided.
        const ACC_ABSTRACT = 0x0400;
        /// Declared strictfp; floating-point mode is FP-strict.
        const ACC_STRICT = 0x0800;
        /// Declared synthetic; not present in the source code.
        const ACC_SYNTHETIC = 0x1000;
    }
}
